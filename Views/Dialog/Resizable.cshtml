﻿@using Syncfusion.EJ2
@using Syncfusion.EJ2.Popups
@section ControlsSection{
    <div id="target" class="col-lg-12 control-section">
        @Html.EJS().Button("dialogBtn").CssClass(".dlgbtn").Content("Open Dialog").Render()
        @Html.EJS().Dialog("resizeDialog").Visible(true).AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.None }).EnableResize(true).Header("Resize Me").Close("dialogClose").Open("dialogOpen").Content("<span>This is a dialog with resizable support.</span>").ShowCloseIcon(true).CloseOnEscape(true).Width("300px").Target("#target").AllowDragging(true).Render()
    </div>
}
<style>
    .e-btn-hide {
        display: none;
    }
    /* custom code start */
    #control-container {
        padding: 0px !important;
    }

    #confirmDialog {
        height: 135px;
    }
    .dlgbtn {
        margin-right: 10px;
    }

    #container {
        height: 100%;
        min-height: 280px;
        position: relative;
    }

    @@media screen and (min-width: 150px) and (max-width: 480px) {
        .control-section {
            margin-bottom: 30px;
        }

        .control-wrapper {
            margin-bottom: 0px;
        }
    }
    /* custom code end */
</style>
@section PreScripts {
    <script>
        document.getElementById('dialogBtn').onclick = function () {
            var dialogObj = document.getElementById('resizeDialog').ej2_instances[0];
            dialogObj.show();
        };
        function dialogClose() {
            document.getElementById('dialogBtn').style.display = 'block';
        }
        function dialogOpen() {
            document.getElementById('dialogBtn').style.display = 'none';
        }
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates the resize operation of the dialog control. To resize the modal dialog, select and resize a dialog using its handle (grip) within the sample container.
            The "open dialog" button is used to reopen the dialog if it is closed.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            Users can create resizable modal dialog by setting the enableResize property to true, which is used to change the size of a dialog dynamically and view its content with expanded mode.
            When you configure the target property along with enableResize property, the dialog can be resized within its specified target container.
        </p>
    </div>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example shows how to create resizable modal in the ASP.NET MVC dialog to change the size of a dialog efficiently and view its content more comfortably." />
}

@*custom code end*@
