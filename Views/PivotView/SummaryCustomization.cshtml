@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Pivot Table control demonstrate the grouping bar feature of the pivotgrid widget, grouping bar allows the user to rearrange the fields between different axes, including column, row, value, and filter along with filter and sort options" />
}
@section ControlsSection{

    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().PivotView("pivotview").Width("100%").Height("400").DataSource(dataSource => dataSource.Data((IEnumerable<object>)ViewBag.Data).ExpandAll(false).EnableSorting(true).ShowGrandTotals(false)
           .DrilledMembers(drilledmembers =>
           {
               drilledmembers.Name("Country").Items(ViewBag.drilledMembers).Add();
           })
           .FilterSettings(filterSettings =>
           {
               filterSettings.Name("Products").Items(ViewBag.filterMembers).Type(FilterType.Include).Add();
           })
           .FormatSettings(formatsettings => { formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add(); })
           .Rows(rows => { rows.Name("Country").Add(); rows.Name("Products").Add(); })
           .Columns(columns => { columns.Name("Year").Add(); columns.Name("Order_Source").Caption("Order Source").Add(); })
           .Values(values =>
           {
               values.Name("In_Stock").Caption("In Stock").Add(); values.Name("Sold").Caption("Units Sold").Add();
               values.Name("Amount").Caption("Sold Amount").Add();
           })
           .Filters(filters =>
           {
               filters.Name("Product_Categories").Caption("Product Categories").Add();
           })).GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).Render()
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;height:100%;">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div style="font-weight: 600; font-size: 13px">
                            Hide grand totals
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            @Html.EJS().RadioButton("radio1").Label("Row").Name("Total").Value("Row").Change("onChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            @Html.EJS().RadioButton("radio2").Label("Column").Name("Total").Value("Column").Change("onChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            @Html.EJS().RadioButton("radio3").Label("Both").Name("Total").Value("Both").Checked(true).Change("onChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div style="font-weight: 600; font-size: 13px">
                            Hide sub-totals
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            <input type="text" tabindex="1" id='values' />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #pivotview {
            width: 100%;
            height: 100%;
        }
    </style>
    <script>
        var fields = [
            { Name: 'Country' },
            { Name: 'Year' }
        ];
        var valuesddl = new ej.dropdowns.MultiSelect({
            dataSource: fields,
            mode: 'CheckBox',
            showDropDownIcon: true,
            showClearButton: false,
            enableSelectionOrder: false,
            fields: { text: 'Name' },
            placeholder: 'Select fields to hide its sub-totals',
            select: onSelected,
            removed: onRemoved,
            open: onOpen
        });
        valuesddl.appendTo('#values');

        function onRemoved(args) {
            var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
            for (var i = 0; i < pivotGridObj.dataSource.columns.length; i++) {
                if ((pivotGridObj.dataSource.columns[i].name || pivotGridObj.dataSource.columns[i].caption) === args.itemData.Name) {
                    pivotGridObj.dataSource.columns[i].showSubTotals = true;
                }
            }
            for (var i = 0; i < pivotGridObj.dataSource.rows.length; i++) {
                if ((pivotGridObj.dataSource.rows[i].name || pivotGridObj.dataSource.rows[i].caption) === args.itemData.Name) {
                    pivotGridObj.dataSource.rows[i].showSubTotals = true;
                }
            }
        }

        function onSelected(args) {
            var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
            for (var i = 0; i < pivotGridObj.dataSource.columns.length; i++) {
                if ((pivotGridObj.dataSource.columns[i].name || pivotGridObj.dataSource.columns[i].caption) === args.itemData.Name) {
                    pivotGridObj.dataSource.columns[i].showSubTotals = false;
                }
            }
            for (var i = 0; i < pivotGridObj.dataSource.rows.length; i++) {
                if ((pivotGridObj.dataSource.rows[i].name || pivotGridObj.dataSource.rows[i].caption) === args.itemData.Name) {
                    pivotGridObj.dataSource.rows[i].showSubTotals = false;
                }
            }
        }

        function onOpen(args) {
            args.popup.element.querySelector(".e-filter-parent").style.display = 'none';
        }

        function onChange(args) {
            var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
            pivotGridObj.setProperties({ dataSource: { showGrandTotals: true } }, true);
            pivotGridObj.setProperties({ dataSource: { showRowGrandTotals: true } }, true);
            pivotGridObj.setProperties({ dataSource: { showColumnGrandTotals: true } }, true);
            if (args.value === 'Column') {
                pivotGridObj.dataSource.showColumnGrandTotals = false;
            }
            else if (args.value === 'Row') {
                pivotGridObj.dataSource.showRowGrandTotals = false;
            }
            else if (args.value === 'Both') {
                pivotGridObj.dataSource.showGrandTotals = false;
            }
        }
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
   <div id="action-description">
       <p>This sample demonstrates showing and hiding grand totals and subtotals in rows, columns, or both.</p>
    </div>
}

@section Description{
<div id="description">
    <p>
        In this sample, you can hide grand totals in row, column, or both using radio buttons available under the <b>Hide grand totals</b> category. To hide grand totals in both row and column, set the property <code>DataSource->ShowGrandTotals</code> as false. To hide the row and column grand totals separately, set the property <code>DataSource->ShowRowGrandTotals</code> and <code>DataSource->ShowColumnGrandTotals</code>as false.
    </p>
    <p>
        Also, in this sample, you can hide subtotals for specific fields too. It can be achieved by selecting appropriate fields from the drop-down available under the <b>Hide sub-totals</b> category. To hide subtotals for a specific field, set the <code>ShowSubTotals</code> property as false inside the field definition.
    </p>
</div>
}
