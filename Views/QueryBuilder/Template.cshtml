@using Syncfusion.EJ2.QueryBuilder; 

@section ControlsSection{
    <div class="col-lg-8 control-section">
    @Html.EJS().QueryBuilder("querybuilder").Columns(col =>
{
    col.Field("Category").Label("Category").Type("string").Template(new { create = "categoryCreate", destroy = "categoryDestroy", write = "categoryWrite" }).Add();
    col.Field("PaymentMode").Label("Payment Mode").Type("string").Template(new { create = "paymentCreate", destroy = "paymentDestroy", write = "paymentWrite" }).Operators(ViewBag.paymentOperator).Add();
    col.Field("TransactionType").Label("Transaction Type").Type("boolean").Template(new { create = "transactionCreate", destroy = "transactionDestroy", write = "transactionWrite" }).Operators(ViewBag.transactionOperator).Add();
    col.Field("Description").Label("Description").Type("string").Add();
    col.Field("Date").Label("Date").Type("date").Add();
    col.Field("Amount").Label("Amount").Type("number").Template(new { create = "amountCreate", destroy = "amountDestroy", write = "amountWrite" }).Operators(ViewBag.amountOperator).Add();
}).DataSource(ViewBag.dataSource).Rule(ViewBag.rule).MaxGroupCount(5).Width("100%").ConditionChanged("updateRule").FieldChanged("updateRule").ValueChanged("updateRule").OperatorChanged("updateRule").RuleDelete("updateRule").GroupDelete("updateRule").RuleInsert("updateRule").GroupInsert("updateRule").Render()
    </div>

<div class="col-lg-4 property-section">
    <table id="property" title="Properties">
        <tr>
            <td>
                <div class="row">
                @Html.EJS().RadioButton("radio1").Label("JSON Rule").Name("rule").Value("json").Checked(true).Change("changeValue").Render()
                 </div>
            </td>
            <td>
                <div class="row">
                @Html.EJS().RadioButton("radio2").Label("SQL Rule").Name("rule").Value("sql").Change("changeValue").Render()
                </div>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <textarea id='ruleContent' readonly=true> </textarea>
            </td>
        </tr>
    </table>
</div>
}
@section Meta{
    <meta name="description" content="This sample demonstrates the default functionalities of the Query Builder component. Click the plus button to add group or rules." />
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the integration of the Dropdown List and Slider components as templates in the Query Builder control.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            This sample illustrates how to integrate the Dropdown List, Slider, and Checkbox components with the Query Builder. The available types of templates are:
            <ul>
                <li>
                    <code>DropDownList</code>
                </li>
                <li>
                    <code>AutoComplete</code>
                </li>
                <li>
                    <code>CheckBox</code>
                </li>
                <li>
                    <code>Slider</code>
                </li>
            </ul>
        </p>
        <p>This sample also illustrates the created filters in JSON and SQL modes.</p>
        <p>
            More information about Query Builder can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/aspnetmvc/documentation/query-builder/getting-started">
                documentation section
            </a>.
        </p>
    </div>
}

@section Scripts {
    <script>
        var element = document.getElementById('ruleContent');
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        element.textContent = JSON.stringify({
            condition: qryBldrObj.rule.condition,
            rules: qryBldrObj.rule.rules
        }, null, 4);
    </script>
    }
<script>
    function categoryCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'text');
        return elem;

    }
    function categoryDestroy(args) {
        var multiSelect = ej.base.getComponent(document.getElementById(args.elementId), 'multiselect');
        if (multiSelect) {
            multiSelect.destroy();
        }
        var textBox = ej.base.getComponent(document.getElementById(args.elementId), 'textbox');
        if (textBox) {
            textBox.destroy();
        }
    }
    function categoryWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var inOperators = ['in', 'notin'];
        if (inOperators.indexOf(args.operator) > -1) {
            var multiSelectObj = new ej.dropdowns.MultiSelect({
                dataSource: ['Food', 'Travel', 'Shopping', 'Mortgage', 'Salary', 'Clothing', 'Bills'],
                value: args.values,
                mode: 'CheckBox',
                placeholder: 'Select category',
                change: function (e) {
                    qryBldrObj.notifyChange(e.value, e.element);
                }
            });
            multiSelectObj.appendTo('#' + args.elements.id);
        } else {
            var inputobj = new ej.inputs.TextBox({
                placeholder: 'Value',
                input: function (e) {
                    qryBldrObj.notifyChange(e.value, e.event.target);
                }
            });
            inputobj.appendTo('#' + args.elements.id);
            inputobj.value = args.values;
            inputobj.dataBind();
        }


    }
    function paymentCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'text');
        return elem;
    }
    function paymentDestroy(args) {
        var selectObj = ej.base.getComponent(document.getElementById(args.elementId), 'multiselect');
        if (selectObj) {
            selectObj.destroy();
        }
        var dropdown = ej.base.getComponent(document.getElementById(args.elementId), 'dropdownlist');
        if (dropdown) {
            dropdown.destroy();
        }
    }
    function paymentWrite(args) {
        var ds = ['Cash', 'Debit Card', 'Credit Card', 'Net Banking', 'Wallet'];
        var inOperators = ['in', 'notin'];
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        if (inOperators.indexOf(args.operator) > -1) {
            var multiSelectObj = new ej.dropdowns.MultiSelect({
                dataSource: ds,
                value: args.values,
                mode: 'CheckBox',
                placeholder: 'Select Transaction',
                change: function (e) {
                    qryBldrObj.notifyChange(e.value, e.element);
                }
            });
            multiSelectObj.appendTo('#' + args.elements.id);
        }
        else {
           var dropDownObj = new ej.dropdowns.DropDownList({
                dataSource: ds,
                value: args.values ? args.values : ds[0],
                change: function (e) {
                    qryBldrObj.notifyChange(e.itemData.value, e.element);
                }
            });
            dropDownObj.appendTo('#' + args.elements.id);

        }

    }
    function transactionCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'checkbox');
        return elem;

    }
    function transactionDestroy(args) {
        ej.base.getComponent(document.getElementById(args.elementId), 'checkbox').destroy();
    }
    function transactionWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var checked = args.values === 'IsExpensive' ? true : false;
        var boxObj = new ej.buttons.CheckBox({
            label: 'Is Expensive',
            checked: checked,
            change: function (e) {
                qryBldrObj.notifyChange(e.checked ? 'expensive' : 'income', e.event.target);
            }
        });
        boxObj.appendTo('#' + args.elements.id);

    }
    function amountCreate() {
        var elem = document.createElement('div');
        elem.setAttribute('class', 'ticks_slider');
        return elem;

    }
    function amountDestroy(args) {
        ej.base.getComponent(document.getElementById(args.elementId), 'slider').destroy();
    }
    function amountWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var slider = new ej.inputs.Slider({
            value: args.values,
            min: 0,
            max: 100,
            type: 'MinRange',
            tooltip: { isVisible: true, placement: 'Before', showOn: 'Hover' },
            created: function (e) {
                if (document.getElementById('right-pane')) {
                    document.getElementById('right-pane').addEventListener('scroll', onScroll);
                }
            },
            change: function (e) {
                qryBldrObj.notifyChange(e.value, args.elements);
            }
        });
        slider.appendTo('#' + args.elements.id);
    }

    function changeValue() {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var element = document.getElementById('ruleContent');
        if (ej.base.getComponent(document.getElementById("radio2"), 'radio').checked) {
            element.textContent = qryBldrObj.getSqlFromRules(qryBldrObj.rule);
        } else {
            element.textContent = JSON.stringify({
                condition: qryBldrObj.rule.condition,
                rules: qryBldrObj.rule.rules
            }, null, 4);
        }
    }

    function updateRule() {
        var element = document.getElementById('ruleContent');
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        if (ej.base.getComponent(document.getElementById("radio2"), 'radio').checked) {
            element.textContent = qryBldrObj.getSqlFromRules(qryBldrObj.rule);
        } else {
            element.textContent = JSON.stringify({
                condition: qryBldrObj.rule.condition,
                rules: qryBldrObj.rule.rules
            }, null, 4);
        }
    }
    function onScroll() {
        var slider = [document.getElementsByClassName('ticks_slider')[0].ej2_instances[0]];
        slider.forEach(function (slider) {
            // Refreshing each slider tooltip object position
            slider.refreshTooltip();
        });
    }

</script>

<style>
   .e-control-wrapper.e-slider-container.e-horizontal {
        height: 0;
    }

    .e-querybuilder {
        margin: 3% auto;
    }

    #ruleContent {
        border: 1px solid #d3d3d3;
        width: 100%;
        height: 500px;
        overflow: auto;
    }

    .property-panel-table td:first-child {
        width: auto;
    }

    .property-panel-table div.row,
    .property-panel-table div.e-radio-wrapper {
        padding-bottom: 10px;
    }
	
    .highcontrast textarea#ruleContent {
	  background-color: #000;
	}
</style>