@using Syncfusion.EJ2;
<script src="~/Scripts/StockChartData/googl.js"></script>
@section ControlsSection{
    <div class="control-section">
        @(Html.EJS().StockChart("container").Load("load").Title("AAPL Stock Price").TooltipRender("tooltipRender")
                            .Series(sr =>
                            {
                                sr.Name("google").Type(Syncfusion.EJ2.Charts.ChartSeriesType.HiloOpenClose).BearFillColor("#2ecd71").BullFillColor("#e74c3d").DataSource("data").XName("x").High("high").Low("low").Open("open").Close("close").Add();
                            })
                            .Render())
    </div>
    <style>
        #control-container {
            padding: 0px !important;
        }
        #container {
            display: block;
        }

        #container_stock_border {
            pointer-events: none;
        }
    </style>
    <script>
        var data = window.googl;
        var load = function (args) {
            args.stockChart.chartArea = { border: { width: 0 } };
            args.stockChart.border = { width: 1 };
            args.stockChart.tooltip = { enable: true, shared: true };
            args.stockChart.crosshair.enable = true;
            args.stockChart.series[0].animation.enable = true;
            args.stockChart.primaryXAxis = {
                valueType: 'DateTime',
                majorGridLines: { width: 0 },
                crosshairTooltip: { enable: true },
            };
            args.stockChart.primaryYAxis = {
                labelFormat: 'n0',
                rangePadding: 'None',
                lineStyle: { color: 'transparent' },
                majorTickLines: { color: 'transparent' },
            };
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.stockChart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark");
        }
        function tooltipRender(args) {
            if (args.text.split('<br/>')[4]) {
                var target = parseFloat(args.text.split('<br/>')[4].split('<b>')[1].split('</b>')[0]);
                var value = (target / 100000000).toFixed(1) + 'B';
                args.text = args.text.replace(args.text.split('<br/>')[4].split('<b>')[1].split('</b>')[0], value);
            }
        };
    </script>
}
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Stock Chart control shows how to render the HiloOpenClose series chart." />
}
@section ActionDescription{
    <p>
        This sample visualizes stock chart with OHLC series.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Stock chart.
        <code>HILO Open Close series</code> is used to represent selected data value.
    </p>
}


