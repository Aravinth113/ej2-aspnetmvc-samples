@using Syncfusion.EJ2;
<script src="~/Scripts/StockChartData/aapl.js"></script>
@section ControlsSection{
    <style>

        #container {
            display: block;
        }

        #container_stock_border {
            pointer-events: none;
        }
    </style>
    <div class="control-section">
        <div>
            @(Html.EJS().StockChart("container").Load("load").EnablePeriodSelector(false)
                                                                              .Series(sr =>
                                                                              {
                                                                                  sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Area).DataSource("data").XName("x").YName("open").Fill("url(#gradient-chart)").Add();
                                                                              })
                                                                              .Render())
        </div>
    </div>
    <style>

        #gradient-chart stop {
            stop-color: #BDEDE9;
        }

            #gradient-chart stop[offset="0"] {
                stop-opacity: 1;
            }

            #gradient-chart stop[offset="1"] {
                stop-opacity: 0.4;
            }

        #control-container {
            padding: 0px !important;
        }
    </style>
    <svg style="height: 0">
        <defs>
            <linearGradient id="gradient-chart" style="opacity: 1" class='chart-material' x1="0" x2="0" y1="0" y2="1">
                <stop offset="0" />
                <stop offset="1" />
            </linearGradient>
        </defs>
    </svg>
    <script>var data = window.aapl;
        var load = function (args) {
            args.stockChart.chartArea = { border: { width: 0 } };
            args.stockChart.border = { width: 1 };
            args.stockChart.tooltip.enable = true;
            args.stockChart.crosshair.enable = true;
            args.stockChart.seriesType = [];
            args.stockChart.primaryXAxis = {
                valueType: 'DateTime', majorGridLines: { width: 0 },
                crosshairTooltip: { enable: true }
            };
            args.stockChart.primaryYAxis = {
                lineStyle: { color: 'transparent' },
                crosshairTooltip: { enable: false },
                majorTickLines: { color: 'transparent', width: 0 }
            };
            var selectedTheme = themeName ? themeName : 'Material';
            args.stockChart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark");
        }</script>
}
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Stock Chart control shows how to render the Stock Chart without Period Selector." />
}
@section ActionDescription{
    <p>
        This sample renders the stock chart without period selector, data's can be navigated through range selector.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Stock chart.
        <code>AreaSeries</code> is used to represent selected data value.
    </p>
}
