@using Syncfusion.EJ2;
@section ControlsSection{
   <div class="control-section">
    <div style="text-align:center">
        @(Html.EJS().Chart("container")
    .Series(sr =>
    {
        sr.XName("xValue")
             .YName("yValue")
             .Name("Defect")
             .Width(2)
             .Marker(mr=>mr.Visible(true).Width(10).Height(10))
             .DataSource(ViewBag.dataSource)
             .Type(Syncfusion.EJ2.Charts.ChartSeriesType.Pareto).Add();
       })
      .PrimaryXAxis(xaxis =>
          xaxis.Title("Defects")
            .Interval(1)
            .ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
             .MajorGridLines(mg => mg.Width(0))
                .MinorGridLines(mg => mg.Width(0))
                .MajorTickLines(mt => mt.Width(0))
                .MinorTickLines(mt => mt.Width(0))
                .LineStyle(ls => ls.Width(0))
      )
      .PrimaryYAxis(yaxis =>
          yaxis.Title("Frequency")
                .Minimum(0)
                .Maximum(150)
                .Interval(30)
               
                .MinorGridLines(mg => mg.Width(0))
                .MajorTickLines(mt => mt.Width(0))
                .MinorTickLines(mt => mt.Width(0))
                .LineStyle(ls => ls.Width(0))
      )
      .Title("Defect vs Frequency")
      .LegendSettings(leg => leg.Visible(false))
      .Tooltip(tp => tp.Enable(true).Shared(true))
      .Load("load").ChartArea(area => area.Border(br=>br.Color("transparent"))).Render()
        )
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
</style>
    <script>
        function load(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
    </script>
}
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Chart control shows how to render pareto charts." />
}
@section ActionDescription{
    <p>
        This sample illustrates a pareto chart with line and column series. Trackball shows the information about the data point
        closest to the mouse
</p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the pareto charts. Pareto charts are used to find the cumulative
        values of of data in different categories. You can use <code>border</code>,
        <code>fill</code> properties to customize the vertical rectangle. <code>dataLabel</code> is used to represent individual
        data and its value.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <br>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Chart component features are segregated into individual feature-wise modules.
    </p>
    <p>
        More information on the column series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">
            documentation
            section
        </a>.
    </p>
}