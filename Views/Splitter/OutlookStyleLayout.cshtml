@using Syncfusion.EJ2

@section ControlsSection {
    <div class="col-lg-12 control-section" style="height: 580px;">
        <div id="target">
            <div>
                @Html.EJS().Splitter("splitter").Created("onCreate").PaneSettings(item =>
                     {
                         item.Size("28%").Min("27%").Content("<div><div class='content'><div id='tree'></div></div></div>").Add(); item.Size("33%").Min("23%").Content("<div><div class='content'><div id='groupedList' tabindex='1'></div></div></div>").Add(); item.Size("37%").Min("30%").Content("<div> <div class='content'><div style='width: 100%; padding: 15px;'> <table> <tr> <td><button class='e-btn e-flat e-outline'>To...</button></td> <td><input id='firstname' /></td> </tr> <tr> <td><button class='e-btn e-flat e-outline'>Cc...</button></td> <td><input id='lastname' /></td> </tr> <tr> <td><div id='subject-text'>Subject</div></td> <td><input id='subject' /></td> </tr> </table> </div> <div class='forum'> <div id='createpostholder'> <div id='defaultRTE'> </div> <div id='buttonSection'> <button class='e-btn e-primary' id='send'>Send</button> <button class='e-btn' id='discard'>Discard</button> </div> </div> </div> </div> </div>").Add();
                     }).Height("493px").Width("100%").Render()
            </div>
        </div>
    </div>
    <style>

        #discard {
            margin-left: 7px;
        }

        table {
            width: 100%;
        }
        /* custom code start */
        #target {
            margin: 20px auto;
            max-width: 820px;
        }
        /* custom code end */

        td {
            padding: 2px;
        }

        .control-section {
            min-height: 370px;
        }

        .e-treeview .e-list-text {
            width: 100%;
        }

        #groupedList.e-listview .e-list-group-item {
            height: 0;
        }

        #splitter1 .settings.e-list-wrapper.e-list-multi-line.e-list-avatar {
            padding: 15px;
        }

        #buttonSection {
            padding: 7px;
        }

        #createpostholder {
            padding-left: 3px;
            padding-right: 4px;
        }

        #createpostholder {
            padding-right: 4px;
        }
    </style>
    <script id="treeTemplate" type="text/x-template">
        <div>
            <div class="treeviewdiv">
                <div style="float:left">
                    <span class="treeName">${name}</span>
                </div>
                ${if(count)}
                <div style="margin-right: 5px; float:right">
                    <span class="treeCount e-badge e-badge-primary">${count}</span>
                </div>
                ${/if}
            </div>
        </div>
    </script>
    <script type="text/javascript">
        function onCreate(args) {
            var inputobj1 = new ej.inputs.TextBox({});
            inputobj1.appendTo('#firstname');
            var inputobj2 = new ej.inputs.TextBox({});
            inputobj2.appendTo('#lastname');
            var inputobj3 = new ej.inputs.TextBox({});
            inputobj3.appendTo('#subject');
            // Data source for TreeView component
            var mailBox = [
                { id: 1, name: 'Favorites', hasChild: true },
                { id: 2, pid: 1, name: 'Sales Reports', count: '4' },
                { id: 3, pid: 1, name: 'Sent Items' },
                { id: 4, pid: 1, name: 'Marketing Reports ', count: '6' },
                { id: 5, name: 'Andrew Fuller', hasChild: true, expanded: true },
                { id: 6, pid: 5, name: 'Inbox', selected: true, count: '20' },
                { id: 7, pid: 5, name: 'Drafts', count: '5' },
                { id: 15, pid: 5, name: 'Archive' },
                { id: 8, pid: 5, name: 'Deleted Items' },
                { id: 9, pid: 5, name: 'Sent Items' },
                { id: 10, pid: 5, name: 'Sales Reports', count: '4' },
                { id: 11, pid: 5, name: 'Marketing Reports', count: '6' },
                { id: 12, pid: 5, name: 'Outbox' },
                { id: 13, pid: 5, name: 'Junk Email' },
                { id: 14, pid: 5, name: 'RSS Feed' },
                { id: 15, pid: 5, name: 'Trash' }
            ];
            // Render the TreeView using template option
            var treeObj = new ej.navigations.TreeView({
                fields: { dataSource: mailBox, id: 'id', parentID: 'pid', text: 'name', hasChildren: 'hasChild' },
                nodeTemplate: '#treeTemplate',
            });
            treeObj.appendTo('#tree');
            // tslint:disable:max-line-length
            //Define an array of JSON data
            var dataSource = [
                { Name: 'Selma Tally', content: '<div><div class="status">Apology marketing email</div><div id="list-message">Hello Ananya Singleton</div>', id: '1', order: 0 },
                { Name: 'Illa Russo', content: '<div><div class="status">Annual conference</div><div id="list-message">Hi jeani Moresa</div></div>', id: '4', order: 0 },
                { Name: 'Camden Macmellon', content: '<div><div class="status">Reference request- Camden hester</div><div id="list-message">Hello Kerry Best,</div></div>', order: 0 },
                { Name: 'Garth Owen', content: '<div><div class="status">Application for job Title</div><div id="list-message">Hello Illa Russo</div></div>', id: '2', order: 0 },
                { Name: 'Ursula Patterson', content: '<div><div class="status">Programmaer Position Applicant</div><div id="list-message">Hello Kerry best,</div></div>', id: '2', order: 0 }
            ];
            // Initialize ListView component
            var listObj = new ej.lists.ListView({
                //Set defined data to dataSource property
                dataSource: dataSource,
                cssClass: 'e-list-template',
                //Map the appropriate columns to fields property
                fields: { text: 'Name', groupBy: 'order' },
                //Set customized group-header template
                groupTemplate: '<div class="e-list-wrapper"><span class="e-list-item-content"></span></div>',
                //Set customized list template
                template: '<div class="settings e-list-wrapper e-list-multi-line">' +
                    '<span class="e-list-item-header">${Name}</span>' +
                    '<span class="e-list-content">${content}</span>' +
                    '</div>'
            });
            //Render initialized ListView component
            listObj.appendTo('#groupedList');
            var button1 = new ej.buttons.Button({ isPrimary: true });
            button1.appendTo('#rteSubmit');
            var button2 = new ej.buttons.Button();
            button2.appendTo('#rteCancel');
            var defaultRTE = new ej.richtexteditor.RichTextEditor({ height: '262px' });
            defaultRTE.appendTo('#defaultRTE');
        }

    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates the splitter control that is used to design outlook-like application using multiple horizontal panes. You can resize its panes horizontally to increase dimension.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The splitter control is used to create outlook-like user interface application using multiple panes with horizontal orientation.
            To create outlook-style user interface, use TreeView, ListView, and RichTextEditor controls within split panes.
            The TreeView control is used to display mail folders at left pane and ListView to display details of mail items, and
            RichTextEditor to create new mail.
        </p>
    </div>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="The example explains how to construct an outlook style layout using ASP.NET MVC Splitter, TreeView, ListView, and Rich Text Editor with multiple panes." />
}

@*custom code end*@