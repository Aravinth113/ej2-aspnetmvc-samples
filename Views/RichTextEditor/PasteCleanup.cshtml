@using Syncfusion.EJ2
@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.DropDowns
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="content-wrapper" id="all-option-sample">
            <div class="control-section">
                @Html.EJS().RichTextEditor("pastecleanup").Value((string)ViewBag.value).Created("created").PasteCleanupSettings(p => p.Prompt(true)).Render()
            </div>
        </div>
    </div>

    <div class="col-lg-4 property-section" id="all-option-table">
        <div>
            <table id="property" title="Properties">
                <tbody>
                    <tr>
                        <td>
                            <div>Format Option </div>
                        </td>
                        <td>
                            <div>
                                @Html.EJS().DropDownList("format").PopupHeight("200px").Index(0).DataSource(
                    (IEnumerable<FormatOption>)ViewBag.data).Change("formatChange").Fields(new DropDownListFieldSettings { Text = "Format", Value = "Id" }).Render()
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Denied Tags </div>
                        </td>
                        <td>
                            <div>
                                @Html.EJS().TextBox("deniedTags").Change("deniedTagsChange").Placeholder("'img[!href]'").Render()
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Denied Attributes </div>
                        </td>
                        <td>
                            <div>
                                @Html.EJS().TextBox("deniedAttributes").Change("deniedTagsChange").Placeholder("'id', 'title'").Render()
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Allowed Style Properties </div>
                        </td>
                        <td>
                            <div>
                                @Html.EJS().TextBox("allowedstyleproperties").Change("allowedStyleChange").Placeholder("'href', 'style'").Render()
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}

@section Scripts{
    <script>


    </script>
}

@section Meta{
    <meta name="description" content="This example explains how to clean up HTML when pasting content in the editor. It is used to paste content as plain text and deny specific tags, attributes, and properties." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This example demonstrates the paste cleanup feature of the RichTextEditor control. Paste your content in the editor after configuring the corresponding options and cleanup settings.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>The pasted content can be cleaned up using pasteCleanup settings. The following settings are available to clean up the content:</p>
        <ul>
            <li>
                Select any option in <code>Format Option</code> drop down list for the paste content.
                <ul>
                    <li>Select the <code>Prompt</code> option to invoke prompt dialog with paste options on pasting the content in editor.</li>
                    <li>Select the <code>Plain Text</code> option to paste the content as plain text.</li>
                    <li>Select the <code>Keep Format</code> option to keep the same format with copied content.</li>
                    <li>Select the <code>Clean Format</code> option to keep the same format with copied content.</li>
                </ul>
            </li>
            <li>
                Fill the <code>denied tags</code> text box to ignore the tags when pasting HTML content. For example:
                <ul>
                    <li><code>['a[!href]']</code> - paste the content by filtering anchor tags that don't have the 'href' attribute.</li>
                    <li><code>['a[href, target]']</code> - paste the content by filtering anchor tags that have the 'href' and 'target' attributes.</li>
                </ul>
            </li>
            <br />
            <li>
                Fill the <code>denied attributes</code> to paste the content by filtering out these attributes from the content. For example:
                <ul>
                    <code>['id', 'title']</code> - This will remove the attributes 'id' and 'title' from all tags.
                </ul>
            </li>
            <br />
            <li>
                Fill the allowed style properties to paste the content by accepting these style attributes and removing other attributes. For example:
                <ul>
                    <code>['color', 'margin']</code> - This will allow only the style properties 'color' and 'margin' in each pasted element.
                </ul>
            </li>
        </ul>
        <p><b>Injecting Module</b></p>
        <p>The previous features were built as modules to be included in your application. For example, inject the <code>'PasteCleanup'</code> module using <code>RichTextEditor.Inject (Toolbar, Link, Image, Count, HtmlEditor, PasteCleanup)</code> to use the paste cleanup feature.</p>
    </div>
}

<script>
    var defaultAPI;
    function created() {
        defaultAPI = this;
        defaultAPI.pasteCleanupSettings.deniedTags = [];
        defaultAPI.pasteCleanupSettings.deniedAttrs = [];
        defaultAPI.pasteCleanupSettings.allowedStyleProps = [];
    }

    function formatChange() {
        if (format.value === 'Prompt') {
            defaultAPI.pasteCleanupSettings.prompt = true;
        } else if (format.value === 'Plain Text') {
            defaultAPI.pasteCleanupSettings.prompt = false;
            defaultAPI.pasteCleanupSettings.plainText = true;
        } else if (format.value === 'Keep Format') {
            defaultAPI.pasteCleanupSettings.prompt = false;
            defaultAPI.pasteCleanupSettings.plainText = false;
            defaultAPI.pasteCleanupSettings.keepFormat = true;
        } else if (format.value === 'Clean Format') {
            defaultAPI.pasteCleanupSettings.prompt = false;
            defaultAPI.pasteCleanupSettings.plainText = false;
            defaultAPI.pasteCleanupSettings.keepFormat = false;
        }
        defaultAPI.dataBind();
    }

    function deniedTagsChange(args) {
        defaultAPI.pasteCleanupSettings.deniedTags = (eval)('[' + deniedTags.value + ']');// jshint ignore:line
        defaultAPI.dataBind();
    }

    function deniedAttrsChange(args) {
        defaultAPI.pasteCleanupSettings.deniedAttrs = (eval)('[' + deniedAttributes.value + ']');// jshint ignore:line
        defaultAPI.dataBind();
    }

    function allowedStyleChange(args) {
        defaultAPI.pasteCleanupSettings.allowedStyleProps = (eval)('[' + allowedstyleproperties.value + ']');// jshint ignore:line
        defaultAPI.dataBind();
    }
</script>
